#!/usr/bin/env python

# This file is part of nestor.
#
# nestor is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nestor is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with nestor.  If not, see <http://www.gnu.org/licenses/>.

import getopt
import os
import sys

from pynestor import Nestor
from pynestor.dbconfigdict import NESTOR_CONFIG_DEFAULTS
from pynestor.utils import nestorRunning, remoteSetConfig
from pynestor.helpers.amuledl import AmuleHelper
from pynestor.helpers.bittorrent import BitTorrentHelper
from pynestor.helpers.filemanager import FileManagerHelper
from pynestor.helpers.medialibrary import MediaLibraryHelper
from pynestor.helpers.systemactions import SystemActionsHelper

def usage():
    print """Usage:
    %s [options] [action [action-param ...]]
    
Options:
    -h, --help          print help and exit
    --main-db=<FILE>    use main sqlite database <FILE>
    --object-db=<FILE>  use object sqlite database <FILE>
    
Actions:
    printopts           prints options and exit
    setopt opt=val ...  set option(s) and exit
    status              get nestor running status
    stop                terminate nestor
    kill                kill nestor (use when 'stop' does not work)
""" % sys.argv[0]


def option_error(err):
    print err
    print " "
    usage()
    sys.exit(2)


def parse_options():
    try:
        opts, args = getopt.getopt(sys.argv[1:],
            "h", 
            ["help", "main-db=", "object-db="])
    except getopt.GetoptError, err:
        option_error(str(err))
        
    ret = {}
    ret['kwargs'] = {'daemonize':True}
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("--main-db"):
            ret['kwargs']['main_db'] = a
        elif o in ("--object-db"):
            ret['kwargs']['obj_db'] = a
        else:
            assert False, "unhandled option !"
            
    if len(args):
        action = args[0]
        if action not in ('setopt', 'printopts', 'kill', 'stop', 'status'):
            option_error("Unknown action '%s'" % action)
        if action == 'setopt':
            if len(args) < 2:
                option_error("Missing parameters for setopt")
            ret['action_params'] = args[1:]
        ret['action'] = action
        
    return ret
    
    
def print_config(**kwargs):
    kwargs['daemonize'] = False
    kwargs['dry_run'] = True
    nestor = Nestor(**kwargs)
    found_keys = nestor.config.keys()
    print "Configured options:"
    for k in sorted(found_keys):
        print "  %s = %s" % (k, nestor.config[k])
    print " "
    print "Default options:"
    for k in sorted(NESTOR_CONFIG_DEFAULTS.keys()):
        if k not in found_keys:
            print "  %s = %s" % (k, NESTOR_CONFIG_DEFAULTS[k])
            
            
def set_config(config, **kwargs):
    kwargs['daemonize'] = False
    kwargs['dry_run'] = True
    nestor = Nestor(**kwargs)
    
    setconf = {}
    for c in config:
        try:
            key, val = c.split('=', 1)
        except ValueError:
            option_error("Malformed config option '%s'" % c)
        if key == 'version':
            print "Warning: changing the DB version number can seriously mess up things !"
            print "If you're sure, use the 'i_really_want_to_change_the_version_number' parameter."
            return
        if key == 'i_really_want_to_change_the_version_number':
            key = 'version'
        setconf[key] = val
    
    if nestorRunning(os.path.basename(sys.argv[0])):
        for k in setconf.keys():
            ret = remoteSetConfig(nestor, k, setconf[k])
            if ret:
                print "Setting %s to %s" % (k, setconf[k])
            else:
                print "Could not set %s to %s !" % (k, setconf[k])
    else:
        for k in setconf.keys():
            nestor.config[k] = setconf[k]
            print "Setting %s to %s" % (k, setconf[k])
            
            
def kill_nestor(kill = False):
    if not nestorRunning(os.path.basename(sys.argv[0])):
        print "nestor is not running !"
    else:
        pidfile = "/var/run/%s.pid" % os.path.basename(sys.argv[0])
        pidfd = open(pidfile, 'r')
        pid = int(pidfd.read())
        pidfd.close()
        import signal
        if kill:
            os.kill(pid, signal.SIGKILL)
        else:
            os.kill(pid, signal.SIGTERM)
        
    
def run_nestor():
    opt = parse_options()
    kwargs = opt['kwargs']
    # kwargs['daemonize'] = False
    
    if opt.has_key('action'):
        if opt['action'] == 'printopts':
            print_config(**kwargs)
        elif opt['action'] == 'setopt':
            set_config(opt['action_params'], **kwargs)
        elif opt['action'] == 'stop':
            kill_nestor()
        elif opt['action'] == 'kill':
            kill_nestor(True)
        elif opt['action'] == 'status':
            no = '' if nestorRunning(os.path.basename(sys.argv[0])) else 'not '
            print 'nestor is %srunning' % no
        sys.exit()
        
    if nestorRunning(os.path.basename(sys.argv[0])):
        print "nestor is already running !"
        sys.exit(2)
        
    
    nestor = Nestor(**kwargs)
    nestor.info("****************************************")
       
    nestor.add_helper(AmuleHelper)
    nestor.add_helper(BitTorrentHelper)
    nestor.add_helper(FileManagerHelper)
    nestor.add_helper(MediaLibraryHelper)
    nestor.add_helper(SystemActionsHelper)
    
    if int(nestor.config['nestor.use_psyco']):
        try:
            import psyco
            nestor.verbose("Enabling psyco...")
            psyco.full()
        except ImportError:
            nestor.info("Warning: psyco is enabled in config but not available")
        
    
    nestor.info("Starting nestor...")
    nestor.run()
    nestor.info("Stopped nestor")


if __name__ == '__main__':
    run_nestor()
    
